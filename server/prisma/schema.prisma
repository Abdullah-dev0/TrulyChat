generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                    @id @map("_id")
  name                     String
  email                    String                    @unique
  emailVerified            Boolean
  image                    String?
  createdAt                DateTime
  updatedAt                DateTime
  sessions                 Session[]
  accounts                 Account[]
  conversationParticipants ConversationParticipant[]
  Messages                 Messages[]

  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String    @unique
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Messages {
  id             String       @id @default(cuid()) @map("_id") @db.ObjectId
  content        String
  conversationId String       @db.ObjectId
  senderId       String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation(fields: [senderId], references: [id])
  createdAt      DateTime     @default(now())

  @@index([conversationId])
  @@index([senderId])
  @@map("message")
}

model Conversation {
  id            String                    @id @default(cuid()) @map("_id") @db.ObjectId
  messages      Messages[]
  lastMessageAt DateTime?
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  participants  ConversationParticipant[]

  @@map("conversation")
}

model ConversationParticipant {
  id             String       @id @default(cuid()) @map("_id") @db.ObjectId
  userId         String       
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([conversationId])
  @@map("conversation_participant")
}
